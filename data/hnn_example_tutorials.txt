Title: 01. Simulate Event Related Potentials (ERPs)
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/workflows/plot_simulate_evoked.html#sphx-glr-auto-examples-workflows-plot-simulate-evoked-py
Description: 01. Simulate Event Related Potentials (ERPs) ¶ This example demonstrates how to simulate a threshold level tactile
evoked response, as detailed in the HNN GUI ERP tutorial ,
using HNN-core. We recommend you first review the GUI tutorial. The workflow below recreates an example of the threshold level tactile
evoked response, as observed in Jones et al. J. Neuroscience 2007 [ 1 ] (e.g. Figure 7 in the GUI tutorial), albeit without a direct comparison
to the recorded data. Let us import hnn_core Let us first create our default network and visualize the cells
inside it. The network of cells is now defined, to which we add external drives as
required. Weights are prescribed separately for AMPA and NMDA receptors
(receptors that are not used can be omitted or set to zero). The possible
drive types include the following (click on the links for documentation): First, we add a distal evoked drive Then, we add two proximal drives Now let’s simulate the dipole, running 2 trials with the backend.
To run them in parallel we could set to equal the number of
trials. The backend allows running the simulations in parallel
across trials. Rather than reading smoothing and scaling parameters from file, we recommend
explicit use of the and methods instead. Note that both methods
operate in-place, i.e., the objects are modified. Plot the amplitudes of the simulated aggregate dipole moments over time If you want to analyze how the different cortical layers contribute to
different net waveform features, then instead of passing to , you can provide a list of layers to be visualized and optionally
a list of axes to to visualize the dipole moments separately. Now, let us try to make the exogenous driving inputs to the cells
synchronous and see what happens. This is achieved by setting and when adding each drive. You may interrogate current values defining the spike event time dynamics by Finally, let’s simulate this network. Rather than modifying the dipole
object, this time we make a copy of it before smoothing and scaling. Warning Always look at dipoles in conjunction with raster plots and spike
histogram to avoid misinterpretation. Run multiple trials of your simulation to get an average of different
drives seeds before drawing conclusions. References ¶ [ 1 ] Jones, Stephanie R., et al. “Neural correlates of tactile detection:
a combined magnetoencephalography and biophysically based computational
modeling study.” Journal of Neuroscience 27.40 (2007): 10751-10764. Total running time of the script: (2 minutes 27.802 seconds) Gallery generated by Sphinx-Gallery

Title: 02. Simulate Alpha and Beta Rhythms
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/workflows/plot_simulate_alpha.html#sphx-glr-auto-examples-workflows-plot-simulate-alpha-py
Description: 02. Simulate Alpha and Beta Rhythms ¶ This example demonstrates how to simulate alpha and beta frequency
activity in the alpha/beta complex of the SI mu-rhythm [ 1 ] ,
as detailed in the HNN GUI alpha and beta tutorial ,
using HNN-Core. We recommend you first review the GUI tutorial. The workflow below recreates
the alpha only rhythm, similar to Figure 5 of the GUI tutorial, and the
alpha/beta complex similar to Figure 20 in the GUI tutorial, albeit without
visualization of the corresponding time-frequency spectrograms [ 1 ] . Let us import hnn_core Now let’s simulate the dipole and plot it. To excite the network, we add a
~10 Hz “bursty” drive starting at 50 ms and continuing to the end of the
simulation. Each burst consists of a pair (2) of spikes, spaced 10 ms apart.
The occurrence of each burst is jittered by a random, normally distributed
amount (20 ms standard deviation). We repeat the burst train 10 times, each
time with unique randomization. The drive is only connected to the proximal (dendritic) AMPA synapses on L2/3 and L5 pyramidal neurons. Prior to plotting, we can choose to smooth the dipole waveform (note that the -method operates in-place, i.e. , it alters
the data inside the object). Smoothing approximates the effect of
signal summation from a larger number and greater volume of neurons than are
included in our biophysical model. We can confirm that what we simulate is
indeed 10 Hz activity by plotting the power spectral density (PSD). The next step is to add a simultaneous 10 Hz distal drive with a
lower within-burst spread of spike times ( ) compared with the
proximal one. The different arrival times of spikes at opposite ends of
the pyramidal cells will tend to produce bursts of 15-30 Hz power known
as beta frequency events. We can verify that beta frequency activity was produced by inspecting the PSD
of the most recent simulation. The dominant power in the signal is shifted
from alpha (~10 Hz) to beta (15-25 Hz) frequency range. All plotting and
smoothing parameters are as above, but here no scaling is applied, leading to
smaller absolute values in the plots. References ¶ [ 1 ] ( 1 , 2 ) Jones, S. R. et al. Quantitative analysis and biophysically realistic
neural modeling of the MEG mu rhythm: rhythmogenesis and modulation of
sensory-evoked responses. J. Neurophysiol. 102, 3554–3572 (2009). Total running time of the script: (3 minutes 15.569 seconds) Gallery generated by Sphinx-Gallery

Title: 03. Simulate Gamma Rhythms
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/workflows/plot_simulate_gamma.html#sphx-glr-auto-examples-workflows-plot-simulate-gamma-py
Description: 03. Simulate Gamma Rhythms ¶ This example demonstrates how to simulate gamma rhythms via the well
established pyramidal-interneuron-gamma mechanisms [ 1 ] ,
as detailed in the HNN GUI gamma tutorial ,
using HNN-Core. We recommend you first review the GUI tutorial.
The workflow below recreates weak gamma rhythms similar to Figures 4 and 5
of the GUI tutorial, and strong gamma rhythms similar to Figure 12 and 13
in the GUI tutorial. Let us import hnn_core Read the parameter file and print the between-cell connectivity parameters.
Note that these are different compared with the ‘default’ parameter set used
in, e.g., 02. Simulate Alpha and Beta Rhythms . We’ll add a tonic Poisson-distributed excitation to pyramidal cells and
simulate the dipole moment in a single trial (the default value used by is ). Take a look at how different cell types respond to the exogenous drive. Note
the periodic firing pattern of all cell types. While the basket cells fire
relatively synchronously, the pyramidal cell populations display a more
varied pattern, in which only a fraction of cells reach firing threshold. To confirm that the periodicity observed in the firing patterns correspond to
a population oscillation in the gamma-range, we can plot the time-frequency
representation together with the signal. Note that the network requires some
time to reach steady state. Hence, we omit the first 50 ms in our analysis. Now, let us try to re-run the simulation with a tonic bias
applied to the L5 Pyramidal cells. Notice that the oscillation waveform is
more regular, with less noise due to the fact that the tonic depolarization
dominates over the influence of the Poisson drive. By default, a tonic bias
is applied to the entire duration of the simulation. Notice that the Layer 5 pyramidal neurons now fire nearly synchronously,
leading to a synchronous activation of the inhibitory basket neurons,
resulting in a low-latency IPSP back onto the pyramidal cells. The duration
of the IPSP is ~20 ms, after which the combined effect of the tonic bias and
Poisson drive is to bring the pyramidal cells back to firing threshold,
creating a ~50 Hz PING rhythm. This type of synchronous rhythm is sometimes
referred to as “strong” PING. Although the simulated dipole signal demonstrates clear periodicity, its
frequency is lower compared with the “weak” PING simulation above. Finally, we demonstrate the mechanistic link between PING and the GABAA decay
time constant ( tau2 ). Using the same network/drive configuration as before,
we decrease tau2 from 5 to 2 ms. This will shorten the effective
refactory period between L5 pyramidal cell spikes and increase the PING
frequency from ~50 to ~65 Hz. References ¶ [ 1 ] Lee, S. & Jones, S. R. Distinguishing mechanisms of gamma frequency
oscillations in human current source signals using a computational
model of a laminar neocortical network. Frontiers in human
neuroscience (2013) Total running time of the script: (4 minutes 49.206 seconds) Gallery generated by Sphinx-Gallery

Title: 04. From MEG sensor-space data to HNN simulation
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/workflows/plot_simulate_somato.html#sphx-glr-auto-examples-workflows-plot-simulate-somato-py
Description: 04. From MEG sensor-space data to HNN simulation ¶ This example demonstrates how to calculate an inverse solution of the median
nerve evoked response potential (ERP) in S1 from the MNE somatosensory dataset,
and then simulate a biophysical model network that reproduces the observed
dynamics. Note that we do not expound on how we came up with the sequence of
evoked drives used in this example, rather, we only demonstrate its
implementation. For those who want more background on the HNN model and the
process used to articulate the proximal and distal drives needed to simulate
evoked responses, see the HNN ERP tutorial . The sequence of evoked drives
presented here is not part of a current publication but is motivated by prior
studies [ 1 ] , [ 2 ] . First, we will import the packages needed for computing the inverse solution
from the MNE somatosensory dataset. MNE (and its dependency NiBabel )
can be installed with The somatosensory dataset can be downloaded by
importing from . Now we set the the path of the dataset for subject . Then, we load the raw data and estimate the inverse operator. There are several methods to do source reconstruction. Some of the methods
such as MNE are distributed source methods whereas dipole fitting will
estimate the location and amplitude of a single current dipole. At the
moment, we do not offer explicit recommendations on which source
reconstruction technique is best for HNN. However, we do want our users
to note that the dipole currents simulated with HNN are assumed to be normal
to the cortical surface. Hence, using the option is
appropriate. To extract the primary response in primary somatosensory cortex (S1), we
create a label for the postcentral gyrus (S1) in source-space Visualizing the distributed S1 activation in reference to the geometric
structure of the cortex (i.e., plotted on a structural MRI) can help us
figure out how to orient the dipole. Note that in the HNN framework,
positive and negative deflections of a current dipole source correspond to
upwards (from deep to superficial) and downwards (from superficial to deep)
current flow, respectively. Uncomment the following code to open an
interactive 3D render of the brain and its surface activation (requires the python library). You should get 2 plots, the first showing the
post-central gyrus label from which the dipole time course was extracted and
the second showing MNE activation at 0.040 sec that resemble the following
images. Now we extract the representative time course of dipole activation in our
labeled brain region using (see this MNE-python
example for more details). Note that the most prominent component of the
median nerve response occurs in the posterior wall of the central sulcus at
~0.040 sec. Since the dipolar activity here is negative, we orient the
extracted waveform so that the deflection at ~0.040 sec is pointed downwards.
Thus, the ~0.040 sec deflection corresponds to current flow traveling from
superficial to deep layers of cortex. Now, let us try to simulate the same with . We read in the
network parameters from and instantiate the network. To simulate the source of the median nerve evoked response, we add a
sequence of synchronous evoked drives: 1 proximal, 2 distal, and 1 final
proximal drive. In order to understand the physiological implications of
proximal and distal drive as well as the general process used to articulate
a sequence of exogenous drive for simulating evoked responses, see the HNN ERP tutorial . Note that setting and creates a drive with synchronous input across cells
in the network. Now we run the simulation over 2 trials so that we can plot the average
aggregate dipole. For a better match to the empirical waveform, set to be >=25. Since the model is a reduced representation of the larger network
contributing to the response, the model response is noisier than it would be
in the net activity from a larger network where these effects are averaged
out, and the dipole amplitude is smaller than the recorded data. The
post-processing steps of smoothing and scaling the simulated dipole response
allow us to more accurately approximate the true signal responsible for the
recorded macroscopic evoked response [ 1 ] , [ 2 ] . Finally, we plot the driving spike histogram, empirical and simulated median
nerve evoked response waveforms, and output spike histogram. References ¶ [ 1 ] ( 1 , 2 ) Jones, S. R., Pritchett, D. L., Stufflebeam, S. M., Hämäläinen, M.
& Moore, C. I. Neural correlates of tactile detection: a combined
magnetoencephalography and biophysically based computational modeling
study. J. Neurosci. 27, 10751–10764 (2007). [ 2 ] ( 1 , 2 ) Neymotin SA, Daniels DS, Caldwell B, McDougal RA, Carnevale NT,
Jas M, Moore CI, Hines ML, Hämäläinen M, Jones SR. Human Neocortical
Neurosolver (HNN), a new software tool for interpreting the cellular and
network origin of human MEG/EEG data. eLife 9, e51214 (2020). https://doi.org/10.7554/eLife.51214 Total running time of the script: (1 minutes 45.085 seconds) Gallery generated by Sphinx-Gallery

Title: 05. Simulate beta modulated ERP
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/workflows/plot_simulate_beta.html#sphx-glr-auto-examples-workflows-plot-simulate-beta-py
Description: 05. Simulate beta modulated ERP ¶ This example demonstrates how event related potentials (ERP) are modulated
by prestimulus beta events. Specifically, this example reproduces Figure 5
from Law et al. 2021 [ 1 ] . To be consistent with the publication, the default
network connectivity is altered. These modifications demonstrate a potential
mechanism by which transient beta activity in the neocortex can suppress
the perceptibility of sensory input. This suppression depends on the timing
of the beta event, and the incoming sensory information. We begin by instantiating the network model from Law et al. 2021 [ 1 ] . The Law 2021 model is based on the network model described in
Jones et al. 2009 [ 2 ] with several important modifications. One of the most
significant changes is substantially increasing the rise and fall time
constants of GABAb-conductances on L2 and L5 pyramidal. Another important
change is the removal of calcium channels from basal dendrites and soma of
L5 pyramidal cells specifically.
We can inspect these properties with the attribute which
contains information on the biophysics and geometry of each cell. A major change to the Jones 2009 model is the addition of a
Martinotti-like recurrent tuft connection [ 3 ] . This new connection
originates from L5 basket cells, and provides GABAa inhibition on
the distal dendrites of L5 pyramidal cells. The remaining changes to the connectivity was the removal of an
L2_basket -> L5_pyramidal GABAa connection, and replacing it with GABAb. To demonstrate sensory depression, we will add the drives necessary to
generate and ERP similar to evoked example ,
but modified to reflect the parameters used in Law et al. 2021.
Specifically, we are considering the case where a tactile stimulus is
delivered at 150 ms. 25 ms later, the first input to sensory cortex arrives
as a proximal drive to the cortical column. Proximal drive corresponds to
projections from the direct thalamic nuclei. This is followed by one distal drive representing projections from indirect thalamic nuclei,
and a final late proximal drive. It is important to note that the parameter
values for each are different from previous examples of the evoked response.
This reflects the altered network dynamics due to the changes described
above. A beta event is created by inducing simultaneous proximal and distal
drives. The input is just strong enough to evoke spiking in the
L2 basket cells. This spiking causes GABAb mediated inhibition
of the network, and ultimately suppressed sensory detection. We can now use our functions to create three distinct simulations:
1) beta event only, 2) ERP only, and 3) beta event + ERP. And finally we simulate. Note that the default simulation time has been
increased to 400 ms to observe the long time course over which beta events
can influence sensory input to the cortical column. By inspecting the activity during the beta event, we can see that spiking
occurs exclusively at 50 ms, the peak of the gaussian distributed proximal
and distal inputs. This spiking activity leads to sustained GABAb mediated
inhibition of the L2 and L5 pyrmaidal cells. One effect of this inhibition
is an asymmetric beta event with a long positive tail. Next we will inspect what happens when a sensory stimulus is delivered 75 ms
after a beta event. Note that the delay time for a tactile stimulus at the
hand to arrive at the cortex is roughly 25 ms, which means the first proximal
input to the cortical column occurs ~100 ms after the beta event. To help understand the effect of beta mediated inhibition on the response to
incoming sensory stimuli, we can compare the ERP and spiking activity due to
sensory input with and without a beta event.
The sustained inhibition of the network ultimately depresses
the sensory response which is associated with a reduced ERP amplitude References ¶ [ 1 ] ( 1 , 2 ) Law, R. G., Pugliese, S., Shin, H., Sliva, D. D., Lee, S.,
Neymotin, S., Moore, C., & Jones, S. R. (2021). Thalamocortical
mechanisms regulating the relationship between transient beta events
and human tactile perception. BioRxiv, 2021.04.16.440210. https://doi.org/10.1101/2021.04.16.440210 [ 2 ] Jones, S. R., Pritchett, D. L., Sikora, M. A., Stufflebeam, S. M.,
Hämäläinen, M., & Moore, C. I. (2009). Quantitative Analysis and
Biophysically Realistic Neural Modeling of the MEG Mu Rhythm:
Rhythmogenesis and Modulation of Sensory-Evoked Responses. Journal of
Neurophysiology, 102(6), 3554–3572. https://doi.org/10.1152/jn.00535.2009 [ 3 ] Silberberg, G., & Markram, H. (2007). Disynaptic Inhibition between
Neocortical Pyramidal Cells Mediated by Martinotti Cells. Neuron,
53(5), 735–746. https://doi.org/10.1016/j.neuron.2007.02.012 Total running time of the script: (13 minutes 4.507 seconds) Gallery generated by Sphinx-Gallery

Title: 01. Plot firing pattern
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_firing_pattern.html#sphx-glr-auto-examples-howto-plot-firing-pattern-py
Description: 01. Plot firing pattern ¶ This example demonstrates how to inspect the firing
pattern of cells in the HNN model. Let us import . Now let’s build the network. We have used the same weights as in the evoked example . does not have any driving inputs and only defines the local network
connectivity. Let us go ahead and first add a distal evoked drive.
We need to define the AMPA and NMDA weights for the connections. An
“evoked drive” defines inputs that are normally distributed with a certain
mean and standard deviation. The reason it is called an “evoked drive” is it can be used to simulate
waveforms resembling evoked responses. Here, we show how to do it with two
proximal drives which drive current up the dendrite and one distal drive
which drives current down the dendrite producing the negative deflection. Now we add the second proximal evoked drive and simulate the network
dynamics with somatic voltage recordings enabled. Note: only AMPA weights
differ from first. Here, we explain more details about the data structures and how they can
be used to better interpret the data. The cell IDs (gids) uniquely define
neurons in the network and are stored in the object as a dictionary Simulated voltage in the soma and other cell sections are stored in as a dictionary. The CellResponse object
stores data produced by individual cells including spikes,
voltages and currents. We can plot the firing pattern of individual cells by indexing with the gid Also, we can plot the spikes in the network and write them to text files.
Note that we can use formatting syntax to specify the filename pattern
with which each trial will be written (‘spk_1.txt’, ‘spk_2.txt, …). To
read spikes back in, we can use wildcard expressions. We can additionally calculate the mean spike rates for each cell class by
specifying a time window with and . Finally, we can plot the soma voltage along with the spiking activity with
raster plots and histograms for the pyramidal cells. Total running time of the script: (1 minutes 19.257 seconds) Gallery generated by Sphinx-Gallery

Title: 02. Record extracellular potentials
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_record_extracellular_potentials.html#sphx-glr-auto-examples-howto-plot-record-extracellular-potentials-py
Description: 02. Record extracellular potentials ¶ The main output of HNN simulations is the ‘dipole’ waveform, i.e., the net
intracellular current flowing in pyramidal cell apical dendrites. At the large
distances between cells and M/EEG sensors, this ‘primary’ current is the main
contributor to the measured fields. Close to the cells, the local field
potential (LFP) is the result of intracellular current leaking into the
extracellular medium through active and passive membrane channels. Under some
simplifying assumptions, we may approximate the LFP at virtual electrodes
placed in and around the HNN network model. The default network model defined in Jones et al. (2009) [ 1 ] consists of a
square grid of pyramidal cells. The in-plane distance between pyramidal cell
somas on the grid can be set by the user, which will have an influence on the
extracellular potentials (but not on the calculated net intracellular dipole
moment). In this example, we’ll simulate a network of model cells spaced
30 um apart. To drive the network dynamics, we’ll use three evoked ‘ERP’
drives; see the event-related potential (ERP) example for details. Extracellular recordings require specifying the electrode positions. It can be
useful to visualize the cells of the network to decide on the placement of
each electrode. The default network consists of 2 layers (L2 and L5), within which the cell
somas are arranged in a regular grid, and apical dendrites are aligned along
the z-axis. We can simulate a linear multielectrode array with 100 um
intercontact spacing [ 2 ] by specifying a list of (x, y, z) coordinate
triplets. The L5 pyramidal cell somas are at z=0 um, with apical dendrites
extending up to z~2000 um. L2 pyramidal cell somas reside at
z~1300 um, and have apical dendrites extending to z~2300 um. We’ll place the
recording array in the center of the network. By default, a value of
0.3 S/m is used for the constant extracellular conductivity and the
‘point source approximation’ for calculations; see for details. The electrode arrays are stored under as a dictionary
of objects that are now
attached to the network and will be recorded during the simulation. Note that
calculating the extracellular potentials requires additional computational
resources and will thus slightly slow down the simulation. Using MPI will
speed up computation considerably. For plotting both aggregate dipole moment and LFP traces, we’ll use a 10 ms
smoothing window, after which both data can be decimated by a factor of 20
from 40 to 2 kHz sampling rates (note that decimation is applied in two
steps). Decimation speeds up plotting significantly. References ¶ [ 1 ] Jones, S. R. et al. Quantitative analysis and biophysically realistic
neural modeling of the MEG mu rhythm: rhythmogenesis and modulation of
sensory-evoked responses. J. Neurophysiol. 102, 3554–3572 (2009). [ 2 ] Kajikawa, Y. & Schroeder, C. E. How local is the local field
potential? Neuron 72, 847–858 (2011). Total running time of the script: (1 minutes 34.627 seconds) Gallery generated by Sphinx-Gallery

Title: 03. Modifying local connectivity
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_connectivity.html#sphx-glr-auto-examples-howto-plot-connectivity-py
Description: 03. Modifying local connectivity ¶ This example demonstrates how to modify the network connectivity. Let us import . To explore how to modify network connectivity, we will start with simulating
the evoked response from the evoked example , and
explore how it changes with new connections. We first instantiate the
network. (Note: Setting loads a set of
predefined drives without the drives API shown previously). Instantiating the network comes with a predefined set of connections that
reflect the canonical neocortical microcircuit. is a list of dictionaries which detail every cell-cell, and drive-cell
connection. The weights of these connections can be visualized with as well as . We can search for specific
connections using which returns the indices
of that match the provided parameters. Data recorded during simulations are stored under . Spiking activity can be visualized after
a simulation is using We can also define our own connections to test the effect of different
connectivity patterns. To start, can be used
to clear all cell-to-cell connections. By default, previously defined drives
to the network are retained, but can be removed with . is then used to create a custom network. Let us first
create an all-to-all connectivity pattern between the L5 pyramidal cells,
and L2 basket cells. allows
connections to be specified with either cell names, or the cell IDs (gids)
directly. We can additionally use the argument to create a sparse
connectivity pattern instead of all-to-all. Let’s try creating the same
network with a 10% chance of cells connecting to each other. With the previous connection pattern there appears to be synchronous rhythmic
firing of the L5 pyramidal cells with a period of 10 ms. The synchronous
activity is visible as vertical lines where several cells fire simultaneously
Using the sparse connectivity pattern produced a lot more spiking in
the L5 pyramidal cells. We can plot the sparse connectivity pattern between cell populations. Note that the sparsity is in addition to the weight decay with distance
from the source cell. In the sparse network, there still appears to be some rhythmicity
where the cells are firing synchronously with a smaller period of 4-5 ms.
As a final step, we can see how this change in spiking activity impacts
the aggregate current dipole. Total running time of the script: (3 minutes 42.884 seconds) Gallery generated by Sphinx-Gallery

Title: 04. Use MPI backend for parallelization
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_simulate_mpi_backend.html#sphx-glr-auto-examples-howto-plot-simulate-mpi-backend-py
Description: 04. Use MPI backend for parallelization ¶ This example demonstrates how to use the MPI backend for
simulating dipoles using HNN-core. The MPI backend allows running the simulation in parallel across neurons in the
network even with a single trial. For this, you will
need the MPI related software installed. Note that if you
want to simulate in parallel across trials, the Joblib backend allows this
without the need to install and configure MPI. Let us import hnn_core Following the alpha example , we add a
~10 Hz “bursty” drive starting at 50 ms and continuing to the end of the
simulation. Each burst consists of a pair (2) of spikes, spaced 10 ms apart.
The occurrence of each burst is jittered by a random, normally distributed
amount (20 ms standard deviation). We repeat the burst train 10 times, each
time with unique randomization. Finally, to simulate we use the class. This will
start the simulation across the number of processors (cores) specified by using MPI. The launcher is used from , which must be installed on the system Total running time of the script: (2 minutes 55.762 seconds) Gallery generated by Sphinx-Gallery

Title: 05. Optimize simulated evoked response parameters
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/optimize_evoked.html#sphx-glr-auto-examples-howto-optimize-evoked-py
Description: 05. Optimize simulated evoked response parameters ¶ This example demonstrates how to optimize the parameters
of the model simulation to match an experimental dipole waveform. Let us import hnn_core First, we will load experimental data into Dipole object. This is a different experiment than the one to which the base parameters were
tuned. So, the initial RMSE will be large, giving the optimization procedure
a lot to work with. Let’s then simulate the dipole with some initial parameters. Now we start the optimization! First, we define a function that will tell the optimization routine how to
modify the network drive parameters. The function will take in the Network
object with no attached drives, and a dictionary of the parameters we wish to
optimize. Then, we define the constraints. The constraints must be a dictionary of tuples where the first value in each
tuple is the lower bound and the second value is the upper bound for the
corresponding parameter. The following synaptic weight parameter ranges (units of micro-siemens)
were chosen so as to keep the model in physiologically realistic regimes. Now we define and fit the optimizer. Finally, we can plot the experimental data alongside the post-optimization
simulation dipole as well as the convergence plot. Gallery generated by Sphinx-Gallery

Title: 06. Animating HNN simulations
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_hnn_animation.html#sphx-glr-auto-examples-howto-plot-hnn-animation-py
Description: 06. Animating HNN simulations ¶ This example demonstrates how to animate HNN simulations First, we’ll import the necessary modules for instantiating a network and
running a simulation that we would like to animate. We begin by instantiating the network. For this example, we will reduce the
number of cells in the network to speed up the simulations. The class can be used to visualize
the 3D structure of the network. We can also visualize the network from another angle by adjusting the
azimuth and elevation parameters. Next we add event related potential (ERP) producing drives to the network
and run the simulation (see evoked example for more details).
To visualize the membrane potential of cells in the
network, we need use simulate_dipole(…, record_vsec=’all’) which turns
on the recording of voltages in all sections of all cells in the network. Finally, we can animate the simulation using the export_movie() method. We
can adjust the xyz limits of the plot to better visualize the network. Total running time of the script: (1 minutes 46.583 seconds) Gallery generated by Sphinx-Gallery

Title: 07. Batch Simulation
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/plot_batch_simulate.html#sphx-glr-auto-examples-howto-plot-batch-simulate-py
Description: 07. Batch Simulation ¶ This example shows how to do batch simulations in HNN-core, allowing users to
efficiently run multiple simulations with different parameters
for comprehensive analysis. Let us import . Define a parameter grid for the batch simulation. Define a function to calculate summary statistics Run the batch simulation and collect the results. This plot shows an overlay of all smoothed dipole waveforms from the
batch simulation. Each line represents a different set of parameters,
allowing us to visualize the range of responses across the parameter space. This plot displays the minimum and maximum dipole peaks across
different synaptic strengths. This allows us to see how the range of
dipole activity changes as we vary the synaptic strength parameter. Total running time of the script: (0 minutes 24.890 seconds) Gallery generated by Sphinx-Gallery

Title: 08. Optimize simulated rhythmic responses
URL: https://jonescompneurolab.github.io/hnn-core/stable/auto_examples/howto/optimize_rhythmic.html#sphx-glr-auto-examples-howto-optimize-rhythmic-py
Description: 08. Optimize simulated rhythmic responses ¶ This example demonstrates how to optimize the power spectral density (PSD)
of a current dipole signal with significant alpha and beta spectral
components. Let us import hnn_core First, we define a function that will tell the optimization routine how to
modify the network drive parameters. The function will take in the Network
object with no attached drives, and a dictionary of the parameters we wish to
optimize. Then, we define the constraints. The constraints must be a dictionary of tuples where the first value in each
tuple is the lower bound and the second value is the upper bound for the
corresponding parameter. The following synaptic weight parameter ranges (units of micro-siemens)
were chosen so as to keep the model in physiologically realistic regimes. Now we define and fit the optimizer. Finally, we can plot the optimized dipole, power spectral density (PSD), and
convergence plot. Gallery generated by Sphinx-Gallery

