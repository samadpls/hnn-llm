About¶ Section
This is a leaner and cleaner version of the code based off the
 HNN repository . The  Human Neocortical Neurosolver (HNN)  is an open-source neural modeling
tool designed to help researchers/clinicians interpret human brain imaging
data. Based off the original
 HNN repository ,  HNN-core 
provides a convenient way to run simulations of an anatomically
and biophysically detailed dynamical system model of human thalamocortical
brain circuits with only a few lines of code. Given its modular,
object-oriented design, HNN-core makes it easy to generate and evaluate
hypotheses on the mechanistic origin of signals measured with
magnetoencephalography (MEG), electroencephalography (EEG), or
intracranial electrocorticography (ECoG). A unique feature of the HNN model is
that it accounts for the biophysics generating the primary electric currents
underlying such data, so simulation results are directly comparable to source
localized data (current dipoles in units of nano-Ampere-meters); this enables
precise tuning of model parameters to match characteristics of recorded
signals. Multimodal neurophysiology data such as local field potential (LFP),
current-source density (CSD), and spiking dynamics can also be simulated
simultaneously with current dipoles. While the HNN-core API is designed to be flexible and serve users with varying
levels of coding expertise, the HNN-core GUI is designed to be useful
to researchers with no formal computational neural modeling or coding
experience. For more information visit  https://hnn.brown.edu .
There, we describe the use of HNN in studying the circuit-level origin of some
of the most commonly measured MEG/EEG and ECoG signals: event related
potentials (ERPs) and low frequency rhythms (alpha/beta/gamma). Contributors are very welcome. Please read our
 contributing guide  if you are interested.

Dependencies¶ Section
hnn-core requires Python (>=3.8) and the following packages: numpy scipy matplotlib Neuron (>=7.7) numpy scipy matplotlib Neuron (>=7.7)

Optional dependencies¶ Section
ipywidgets voila ipympl ipykernel Note : Please follow the  GUI installation  section to install the correct
GUI dependency versions automatically. scikit-learn joblib (for simulating trials simultaneously) mpi4py (for simulating the cells in parallel for a single trial). Also depends on: openmpi or other mpi platform installed on system psutil ipywidgets voila ipympl ipykernel scikit-learn joblib (for simulating trials simultaneously) mpi4py (for simulating the cells in parallel for a single trial). Also depends on:openmpi or other mpi platform installed on systempsutil openmpi or other mpi platform installed on system psutil

Installation¶ Section
We recommend the  Anaconda Python distribution .
To install  hnn-core , simply do: and it will install  hnn-core  along with the dependencies which are not already installed. Note that if you installed Neuron using the traditional installer package, it is recommended
to remove it first and unset  PYTHONPATH  and  PYTHONHOME  if they were set. This is
because the pip installer works better with virtual environments such as the ones provided by  conda . If you want to track the latest developments of  hnn-core , you can install the current version of the code (nightly) with: To check if everything worked fine, you can do: and it should not give any error messages. Installing optimization dependencies If you are using bayesian optimization, then scikit-learn is required. Install
hnn-core with scikit-learn using the following command: GUI installation To install the GUI dependencies along with  hnn-core , a simple tweak to the above command is needed: Note if you are zsh in macOS the command is: To start the GUI, please do: Parallel backends For further instructions on installation and usage of parallel backends for using more
than one CPU core, refer to our  parallel backend guide . Note for Windows users Install Neuron using the  precompiled installers   before  installing
 hnn-core . Make sure that: does not throw any errors before running the install command.
If you encounter errors, please get help from  NEURON forum .
Finally, do:

